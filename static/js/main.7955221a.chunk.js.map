{"version":3,"sources":["components/Gif.js","components/NoGif.js","components/GifList.js","components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["Gif","props","className","src","url","alt","NoGifs","icon","faFrown","GifList","gifs","results","data","console","log","length","map","gif","images","fixed_height","key","id","NoGif","SearchForm","state","searchText","handleSubmit","event","preventDefault","onSearch","query","value","currentTarget","reset","onSearchChange","setState","target","onSubmit","this","htmlFor","type","onChange","ref","input","name","placeholder","faSearch","Component","App","loading","performSearch","axios","get","then","response","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSASeA,G,MAPH,SAAAC,GACV,OACE,wBAAIC,UAAU,YACZ,yBAAKC,IAAKF,EAAMG,IAAKC,IAAI,Q,cCUhBC,EAXA,WACb,OACE,wBAAIJ,UAAU,WACZ,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAiBK,KAAMC,OAEzB,mECSSC,EAfC,SAAAR,GACd,IAEIS,EAFEC,EAAUV,EAAMW,KAWtB,OAVAC,QAAQC,IAAIH,GAGVD,EADEC,EAAQI,OAAS,EACZJ,EAAQK,KAAI,SAAAC,GAAG,OACpB,kBAAC,EAAD,CAAKb,IAAKa,EAAIC,OAAOC,aAAaf,IAAKgB,IAAKH,EAAII,QAG3C,kBAACC,EAAD,MAGF,wBAAIpB,UAAU,YAAYQ,ICZda,E,2MACnBC,MAAQ,CACNC,WAAY,K,EAEdC,aAAe,SAAAC,GACbA,EAAMC,iBACN,EAAK3B,MAAM4B,SAAS,EAAKC,MAAMC,OAC/BJ,EAAMK,cAAcC,S,EAEtBC,eAAiB,SAAAP,GACf,EAAKQ,SAAS,CAAEV,WAAYE,EAAMS,OAAOL,S,wEAEjC,IAAD,OACP,OACE,0BAAM7B,UAAU,cAAcmC,SAAUC,KAAKZ,cAC3C,2BAAOxB,UAAU,YAAYqC,QAAQ,UAArC,UAGA,2BACEC,KAAK,SACLC,SAAUH,KAAKJ,eACfQ,IAAK,SAAAC,GAAK,OAAK,EAAKb,MAAQa,GAC5BC,KAAK,SACLC,YAAY,cAEd,4BAAQL,KAAK,SAASnB,GAAG,SAASnB,UAAU,iBAC1C,kBAAC,IAAD,CAAiBK,KAAMuC,Y,GA1BOC,aC+CzBC,E,2MA5CbxB,MAAQ,CACNd,KAAM,GACNuC,SAAS,G,EAKXC,cAAgB,WAAoB,IAAnBpB,EAAkB,uDAAV,MACvBqB,IACGC,IADH,gDAE6CtB,EAF7C,oCAIGuB,MAAK,SAAAC,GACJ,EAAKnB,SAAS,CACZzB,KAAM4C,EAAS1C,KAAKA,KACpBqC,SAAS,OAGZM,OAAM,SAAAC,GACL3C,QAAQC,IAAI,kCAAmC0C,O,mFAdnDlB,KAAKY,kB,+BAmBL,OADArC,QAAQC,IAAIwB,KAAKd,MAAMd,MAErB,6BACE,yBAAKR,UAAU,eACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,cAAd,aACA,kBAAC,EAAD,CAAY2B,SAAUS,KAAKY,kBAG/B,yBAAKhD,UAAU,gBACZoC,KAAKd,MAAMyB,QACV,yCAEA,kBAAC,EAAD,CAASrC,KAAM0B,KAAKd,MAAMd,a,GArCpBqC,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.7955221a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Gif = props => {\r\n  return (\r\n    <li className=\"gif-wrap\">\r\n      <img src={props.url} alt=\"\" />\r\n    </li>\r\n  );\r\n};\r\nexport default Gif;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFrown } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NoGifs = () => {\r\n  return (\r\n    <li className=\"no-gifs\">\r\n      <div className=\"icon\">\r\n        <FontAwesomeIcon icon={faFrown} />\r\n      </div>\r\n      <h3>Sorry, no GIFs match your search.</h3>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NoGifs;\r\n","import React from \"react\";\r\nimport Gif from \"./Gif\";\r\nimport NoGif from \"./NoGif\";\r\n\r\nconst GifList = props => {\r\n  const results = props.data;\r\n  console.log(results);\r\n  let gifs;\r\n  if (results.length > 0) {\r\n    gifs = results.map(gif => (\r\n      <Gif url={gif.images.fixed_height.url} key={gif.id} />\r\n    ));\r\n  } else {\r\n    gifs = <NoGif />;\r\n  }\r\n\r\n  return <ul className=\"gif-list\">{gifs}</ul>;\r\n};\r\n\r\nexport default GifList;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class SearchForm extends Component {\r\n  state = {\r\n    searchText: \" \"\r\n  };\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSearch(this.query.value);\r\n    event.currentTarget.reset();\r\n  };\r\n  onSearchChange = event => {\r\n    this.setState({ searchText: event.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n        <label className=\"is-hidden\" htmlFor=\"search\">\r\n          Search\r\n        </label>\r\n        <input\r\n          type=\"search\"\r\n          onChange={this.onSearchChange}\r\n          ref={input => (this.query = input)}\r\n          name=\"search\"\r\n          placeholder=\"Search...\"\r\n        />\r\n        <button type=\"submit\" id=\"submit\" className=\"search-button\">\r\n          <FontAwesomeIcon icon={faSearch} />\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport GifList from \"./components/GifList\";\nimport SearchForm from \"./components/SearchForm\";\n\nclass App extends Component {\n  state = {\n    gifs: [],\n    loading: true\n  };\n  componentDidMount() {\n    this.performSearch();\n  }\n  performSearch = (query = \"dog\") => {\n    axios\n      .get(\n        `http://api.giphy.com/v1/gifs/search?q=${query}&limit=24&api_key=dc6zaTOxFJmzC`\n      )\n      .then(response => {\n        this.setState({\n          gifs: response.data.data,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  };\n  render() {\n    console.log(this.state.gifs);\n    return (\n      <div>\n        <div className=\"main-header\">\n          <div className=\"inner\">\n            <h1 className=\"main-title\">GifSearch</h1>\n            <SearchForm onSearch={this.performSearch} />\n          </div>\n        </div>\n        <div className=\"main-content\">\n          {this.state.loading ? (\n            <p>Loading...</p>\n          ) : (\n            <GifList data={this.state.gifs} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}